// Code generated by hertztool.

package handler

import (
	"context"
	"time"

	"code.byted.org/gopkg/logs/v2"
	"code.byted.org/middleware/hertz/pkg/app"
	"code.byted.org/middleware/hertz_ext/v2/binding"
	"github.com/DexMus/round_robin_service/biz/framework"
	"github.com/DexMus/round_robin_service/biz/model/github/DexMus/round_robin_service"
)

// QueryGameInfo .
// @router /api/game_center/v1/meta/query/ [POST]
func QueryGameInfo(ctx context.Context, c *app.RequestContext) {
	now := time.Now()
	time.Sleep(time.Duration(framework.RandLagency()) * time.Millisecond)
	defer logs.V2.Info().With(ctx).Str("QueryGameInfo").EmplaceKVs("cost (ms)", time.Since(now).Milliseconds()).Emit()
	var err error
	var req round_robin_service.QueryGameInfoReq
	err = binding.BindAndValidate(c, &req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	resp := &round_robin_service.QueryGameInfoResp{
		Game:    req.Game,
		GamerID: req.GamerID,
		Points:  req.Points,
	}
	err = binding.WriteHeader(c, resp)
	if err != nil {
		c.String(500, err.Error())
		return
	}
	c.JSON(200, resp)
}
